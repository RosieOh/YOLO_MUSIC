<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="free">
    <!-- 자유게시판 목록을 검색하는 SQL SELECT 문 -->
    <select id="freeList" resultType="kr.co.teaspoon.dto.Free">
        <![CDATA[
		select * from free
		]]>
        <where>
            <if test="searchType != null">
                <choose>
                    <when test="searchType == 'title'.toString()">
                        title LIKE concat('%', #{searchKeyword}, '%')
                    </when>
                    <when test="searchType == 'content'.toString()">
                        content LIKE concat('%', #{searchKeyword}, '%')
                    </when>
                </choose>
            </if>
        </where>
        <![CDATA[
		order by regdate desc LIMIT #{postStart}, #{postCount}
		]]>
    </select>
    <!-- 글 상세보기를 검색하는 SQL SELECT 문 -->
    <select id="freeDetail" resultType="kr.co.teaspoon.dto.Free">
        select * from free where bno=#{bno}
    </select>
    <!-- 글 수 카운트를 검색하는 SQL SELECT 문 -->
    <select id="totalCount" resultType="integer">
        <![CDATA[
		select count(*) from free
		]]>
        <where>
            <if test="searchType != null">
                <choose>
                    <when test="searchType == 'title'.toString()">
                        title LIKE concat('%', #{searchKeyword}, '%')
                    </when>
                    <when test="searchType == 'content'.toString()">
                        content LIKE concat('%', #{searchKeyword}, '%')
                    </when>
                </choose>
            </if>
        </where>
    </select>
    <!-- 자유게시판에 글을 추가하는 SQL INSERT 문 -->
    <insert id="freeInsert">
        insert into free values (default, #{title}, #{content}, default, 0, #{id}, 0)
    </insert>
    <!-- 자유게시판에서 글을 삭제하는 SQL DELETE 문 -->
    <delete id="freeDelete">
        delete from free where bno=#{bno}
    </delete>
    <!-- 자유게시판의 글을 수정하는 SQL UPDATE 문 -->
    <update id="freeEdit">
        update free set title=#{title}, content=#{content} where bno=#{bno}
    </update>
    <!-- 방문수를 증가시키는 SQL UPDATE 문 -->
    <update id="visitCount">
        update free set visited=visited+1 where bno=#{bno}
    </update>
    <!-- 상위 추천 5개 글을 검색하는 SQL SELECT 문 -->
    <select id="freeBestRecList" resultType="kr.co.teaspoon.dto.Free">
        select * from free order by rec desc limit 5
    </select>
    <!-- 상위 댓글 5개 글을 검색하는 SQL SELECT 문 -->
    <select id="freeBestCmtList" resultType="kr.co.teaspoon.dto.Free">
        SELECT f.bno, f.title, COUNT(c.bno) AS comment_count
        FROM free f
                 JOIN free_comment c ON f.bno = c.bno
        GROUP BY f.bno, f.title, f.content
        ORDER BY comment_count DESC
            LIMIT 5;
    </select>
    <!-- 동적 SQL 조각을 정의하는 SQL 조각 정의 부분 -->
    <sql id="criteria">
        <where>
            <trim prefixOverrides="OR">
                <foreach item="type" collection="typeArr">
                    <trim prefixOverrides="OR">
                        <choose>
                            <when test="type == 'T'.toString()">
                                title LIKE '%' || #{keyword} || '%'
                            </when>
                            <when test="type == 'C'.toString()">
                                content LIKE '%' || #{keyword} || '%'
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </trim>
        </where>
    </sql>
    <!-- 페이징을 적용하여 목록을 검색하는 SQL SELECT 문 -->
    <select id="getListWithPaging" resultType="kr.co.teaspoon.dto.Free">
        <![CDATA[
		select * from free
		]]>
        <include refid="criteria" />
        <![CDATA[
		ORDER BY resdate DESC LIMIT ((#{pageNum} - 1) * #{amount}), #{amount}
		]]>
    </select>
    <!-- 댓글 목록을 검색하는 SQL SELECT 문 -->
    <select id="freeCommentList" resultType="kr.co.teaspoon.dto.FreeComment">
        select * from freecommentlist where bno=#{bno}
    </select>
    <!-- 댓글을 추가하는 SQL INSERT 문 -->
    <insert id="commentInsert">
        INSERT INTO free_comment(bno, author, content) VALUES(#{bno}, #{author}, #{content});
    </insert>
    <!-- 댓글을 삭제하는 SQL DELETE 문 -->
    <delete id="commentDelete">
        delete from free_comment where cno=#{cno}
    </delete>
    <!-- 각 항목에 대한 댓글 수를 계산하는 SQL SELECT 문 -->
    <select id="commentCount" resultType="kr.co.teaspoon.dto.Free">
        SELECT f.bno, COUNT(fc.bno) AS count
        FROM free f
            LEFT JOIN free_comment fc ON f.bno = fc.bno
        GROUP BY f.bno;
    </select>
    <!-- 항목에 대한 추천을 검색하는 SQL SELECT 문 -->
    <select id="findReco" resultType="kr.co.teaspoon.dto.Reco">
        select * from reco where bno=#{bno} and id=#{id}
    </select>
    <!-- 회원에 대한 추천을 검색하는 SQL SELECT 문 -->
    <select id="memberFindReco" resultType="kr.co.teaspoon.dto.Reco">
        select * from reco where bno=#{bno} and id=#{id}
    </select>
    <!-- 항목에 대한 추천을 추가하는 SQL INSERT 문 -->
    <insert id="insertReco">
        insert into reco(bno, id, flag) values(#{bno}, #{id}, 1)
    </insert>
    <!-- 항목에 대한 추천을 제거하는 SQL DELETE 문 -->
    <delete id="deleteReco">
        delete from reco where bno=#{bno} and id=#{id}
    </delete>
    <!-- 항목에 대한 추천을 증가시키는 SQL UPDATE 문 -->
    <update id="increaseRec">
        update free set rec=rec+1 where bno=#{bno}
    </update>
    <!-- 항목에 대한 추천을 감소시키는 SQL UPDATE 문 -->
    <update id="decreaseRec">
        update free set rec=rec-1 where bno=#{bno}
    </update>
</mapper>
